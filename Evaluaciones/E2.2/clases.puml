@startuml

class Observer {
    +virtual void update(Videojuego*) = 0;
}

class Videojuego {
    +virtual Videojuego* clone() = 0;
    +virtual void accept(IVisitor*) = 0;
    +virtual void print() = 0;
    +static int* serie;
    +void concepcion()
    +void diseno()
    +void planificacion()
    +void produccion()
    +void pruebasAceptacion()
    +void setPrecio(float precio_in)
    +float getPrecio()
    +float precio;
    +string nombre;
    +static int* getSerie()
    +void setValues(float precio_in, string nombre_in)
    +void attach(Observer* o)
    +void dettach(Observer* o)
    +void notifyAll(Videojuego* s)
    -vector<Observer*> observers;
}

class CloneCRTP{
    +Videojuego* clone()
}

class Estrategia{
    +void print()
    +void accept(IVisitor* visitor)
    -int serie
    -string fecha, autor, otro
}

class Aventura{
    +void print()
    +void accept(IVisitor* visitor)
    -int serie
    -string color, comp, otro
}

class Aprendizaje{
    +void print()
    +void accept(IVisitor* visitor)
    -int serie
    -string nivel, funcion, otro
}

class Creator {
    -static Creator* instance;
    -Tipo* factoryMethod(string in_atr1, string in_atr2, string in_atr3, float precio, string nombre)
    -Creator()
    -~Creator()
    +Tipo* crearVideojuego(string in_atr1, string in_atr2, string in_atr3, float precio, string nombre)
    +static Creator* getInstance()
    +static bool deleteInstance()
}

class IVisitor {
    +virtual void visit(Estrategia*) = 0;
    +virtual void visit(Aventura*) = 0;
    +virtual void visit(Aprendizaje*) = 0;
}

class AumentarVisitor{
    +void visit(Estrategia* h)
    +void visit(Aventura* h)
    +void visit(Aprendizaje* h)
}

class DisminuirVisitor{
    +void visit(Estrategia* h)
    +void visit(Aventura* h)
    +void visit(Aprendizaje* h)
}

class Almacen {
    -static Almacen* instance
    -vector<Videojuego*> inventario
    -queue<Videojuego*> lastThree
    -Almacen() {}
    -~Almacen() {}
    +void operacionPrecios(bool increment)
    +void accept(IVisitor* visitor)
    +bool agregarJuego(Videojuego* nuevo)
    +bool eliminarJuegoNombre(string nombre)
    +bool eliminarJuegoSerie(int serie)
    +void deshacer()
    +void addToDeleted(Videojuego* vg)
    +void ordenarInventario(bool ascendiente)
    +Videojuego* buscarJuegoNombre(string nombre)
    +Videojuego* buscarJuegoSerie(int serie)
    +int getNumeroDeJuegos()
    +void imprimirInventario()
    +static Almacen* getInstance()
    +static bool deleteInstance()
}

class Publico{
    +void update(Videojuego* s)
}


CloneCRTP <-- Videojuego
Estrategia <-- CloneCRTP
Aventura <-- CloneCRTP
Aprendizaje <-- CloneCRTP
AumentarVisitor <-- IVisitor
DisminuirVisitor <-- IVisitor
Publico <-- Observer
Almacen --|> Videojuego
Creator --* Videojuego
Videojuego --|> IVisitor
Videojuego --|> Observer

@enduml